"""Class for sanitizing strings before passing them to ezcharts functions."""


class Sanitizer:
    """Class to sanitize strings passed to certain ezcharts functions."""

    def __init__(self):
        """Start with empty dict to keep track of sanitized strings."""
        self.sanitised_strings = {}

    # sanitise a string and add it to the dict so that we can desanitise later
    def __call__(self, string):
        """Sanitize string."""
        sanitised = string.upper().replace(".", "_").replace('"', "_dq_")
        # the script generated by ezcharts will wrap strings in single-quotes --> we
        # need to escape any single quotes we might have
        self.sanitised_strings[sanitised] = string.replace("'", r"\'")
        return sanitised

    def desanitise_report(self, report_html_str):
        """Desanitize report."""
        # Some sanitised strings might contain other sanitised strings. In order to
        # avoid the issues that can stem from this, we sort the strings by length so
        # that the longer ones (which might contain shorter ones) are being desanitised
        # first.
        self.sanitised_strings_by_length = sorted(
            self.sanitised_strings.items(),
            key=lambda k: len(k[0]),
            reverse=True,
        )
        desanitised_html_str = ""
        for line in report_html_str.splitlines(keepends=True):
            for sanitised, orig in self.sanitised_strings_by_length:
                line = line.replace(sanitised, orig)
            desanitised_html_str += line

        return desanitised_html_str
