# generated by datamodel-codegen:
#   filename:  results_schema.yml

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List

from pydantic import Field

from workflow_glue.results_schema_helpers import BaseModel


class SampleType(Enum):
    """
    The type of the sample
    """

    no_template_control = 'no_template_control'
    positive_control = 'positive_control'
    negative_control = 'negative_control'
    test_sample = 'test_sample'


class CheckResult(BaseModel):
    """
    A result of some check the workflow has performed on a sample, or itself
    """

    check_name: str = Field(..., description='The name of the check')
    check_pass: bool = Field(..., description='If true the check has passed')


class Sample(BaseModel):
    """
    A sample sheet entry and its corresponding checks and related results
    """

    alias: str = Field(..., description='The alias for the sample given by the user')
    barcode: str = Field(..., description='The physical barcode assigned to the sample')
    sample_type: SampleType = Field(..., description='The type of the sample')
    sample_pass: bool = Field(
        ..., description='If true the sample has passed workflow checks'
    )
    sample_checks: List[CheckResult] = Field(
        ..., description='An array of checks performed on the sample'
    )
    results: Dict[str, Any] = Field(
        ..., description='Further specific workflow results for this sample'
    )


class WorkflowResult(BaseModel):
    """
    Definition for results that will be returned by this workflow. This structure will be passed through by Gizmo speaking clients as WorkflowInstance.results.
    """

    workflow_pass: bool = Field(
        ..., description='True if this workflow instance passes all checks'
    )
    workflow_checks: List[CheckResult] = Field(
        ..., description='An array of checks performed on the workflow instance'
    )
    samples: List[Sample] = Field(..., description='Samples in this workflow instance')
